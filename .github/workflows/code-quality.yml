name: Code Quality Checks

on:
  push:
    branches: [ main, master, develop ] # Or your main development branches
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint-format-check:
    name: Lint, Format, Type & Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Unified Python version
        cache: 'pip' # Cache pip dependencies

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # Install project dependencies including GUI and dev tools (Ruff, Black, MyPy, Bandit, pytest)
        # This assumes these are defined in pyproject.toml's optional-dependencies
        python -m pip install .[gui,dev]

    - name: Run Black (Format Check)
      run: black --check --diff .
      # To auto-format and commit (use with caution, typically run locally or in a separate PR):
      # black .
      # git diff --exit-code # Fails if black made changes

    # isort and Flake8 are replaced by Ruff
    # - name: Run isort (Import Sort Check)
    #   run: isort --check-only --diff .

    # - name: Run Flake8 (Linting)
    #   run: flake8 .

    - name: Run Ruff (Linting and Import Sort Check)
      # Ruff check combines linting (pycodestyle, pyflakes, bugbear, etc.)
      # and import sorting (isort) based on pyproject.toml configuration.
      run: ruff check .

    - name: Run Ruff (Formatting Check)
      # This checks if Ruff's formatter (if configured, or if it has default opinions)
      # would make any changes. For projects using Black as the primary formatter,
      # this step might be redundant if Ruff's formatting rules are Black-compatible
      # or if Ruff is not configured to format.
      # If Black is the sole formatter, this step can be removed or kept as an additional check.
      # For now, keeping it as it's a common Ruff command.
      run: ruff format --check .

    - name: Run MyPy (Static Type Checking)
      # MyPy will use configuration from pyproject.toml (e.g., files/packages to check, python_version)
      # The --ignore-missing-imports is configured in pyproject.toml.
      # With .[gui,dev] installed, many 'missing imports' for dependencies should be resolved.
      run: mypy
      # If you need to specify paths explicitly and override pyproject.toml 'files' or 'packages':
      # run: mypy grazr tests

    - name: Run Bandit (Security Scan)
      run: bandit -r grazr/ -ll -ii
      # -r: recursive, grazr/: your package directory
      # -ll: report on medium and high severity issues (adjust as needed)
      # -ii: report on medium and high confidence issues (adjust as needed)

  # Optional: CodeQL Analysis (GitHub native, very powerful)
  # codeql-analysis:
  #   name: CodeQL Analysis
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write # Required to upload scan results

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: [ 'python' ]

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Initialize CodeQL
  #     uses: github/codeql-action/init@v3
  #     with:
  #       languages: ${{ matrix.language }}
  #       # If you wish to specify custom queries, you can do so here
  #       # queries: +security-extended,etc.

  #   # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, Java, Swift).
  #   # If this step fails, then you should remove it and run the build manually (see documentation).
  #   - name: Autobuild
  #     uses: github/codeql-action/autobuild@v3
  #     # For Python, Autobuild is usually not strictly necessary if dependencies are installed

  #   - name: Perform CodeQL Analysis
  #     uses: github/codeql-action/analyze@v3
  #     with:
  #       category: "/language:${{matrix.language}}"
